<?php

/**
 * Implements hook_help().
 */
function tims_help($path, $arg) {
  switch ($path) {
    case 'admin/help#tims':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The TIMS module allows users with the <em>Administer site configuration</em> permission to create content templates within the browser using the Twig templating language.') . '</p>';
      $output .= '<h3>' . t('Naming your templates') . '</h3>';
      $output .= '<p>' . t('Naming convention is based on what is contained in the theme_get_suggestions array. For example, if you would like to template a node of the article content type, instead of creating a php file named <em>node--article.tpl.php</em> you will create a template in this module\'s interface called <em>node__article</em>. See <a href="@link">Working with template suggestions</a> for more about working with template suggestions and their naming convention.', array('@link' => url('https://drupal.org/node/223440'))) . '</p>';
      $output .= '<h3>' . t('Twig syntax') . '</h3>';
      $output .= '<p>' . t('For a guide to the Twig syntax, refer to the <a href="@link">documention for theming Drupal 8</a> which uses Twig for theming as part of core.', array('@link' => url('https://drupal.org/node/1906384'))) . '</p>';
      $output .= '<h3>' . t('Differences between Drupal 8 theming and this module') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Printing a field') . '</dt>';
      $output .= '<dd>' . t('Drupal 8 Twig syntax needs to modified when printing a field. The variable needs to wrapped in the render function and the raw filter must be applied.') . '</dd>';
      $output .= '<dd>' . t('Render the body field:');
      $output .= '<br />' . t('Drupal 7 TIMS Module: ') . '{{ render(content.body)|raw }}';
      $output .= '<br />' . t('Drupal8: ') . '{{ content.body }}' . '</dd>';
      $output .= '<dd>' . t('Note that printing metadata such as the title or nid works as expected: ') . '{{ title }}' . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_init().
 */
function tims_init() {
  // Don't apply TWIG templates to admin pages.
  if (path_is_admin(current_path())) {
    return;
  }

  // We need to register our stuff after everything else, this is a bit of a hack to do so.
  theme_get_registry();
  $theme_registry_object = theme_get_registry(FALSE);
  $tmp = &drupal_static('theme_get_registry');
  $hooks = $tmp[1];

  foreach (variable_get('tims_templates', array()) as $hook => $template) {
    $info = array();
    $theme_hook_original = $hook;

    // Webform fix. With a hook like webform_form_4, $info['render element'] needs to be populated.
    // Other types of hooks like node make better use of theme_hook_suggestions and
    // merge $info from the main hook (node) and sub-hook (node__4) in theme().
    if (!isset($hooks[$hook]) && substr($hook, 0, 7) == 'webform') {
      // Iteratively strip everything after the last '_' delimiter, until an
      // implementation is found. Webform uses a single '_' pattern.
      while ($pos = strrpos($hook, '_')) {
        $hook = substr($hook, 0, $pos);
        if (isset($hooks[$hook])) {
          break;
        }
      }
    }

    if (isset($hooks[$hook])) {
      $safeKeys = array('type', 'render element', 'preprocess functions', 'process functions', 'variables');
      $info = array_intersect_key($hooks[$hook], array_flip($safeKeys));
    }

    $info['function'] = 'tims_render';
    $info['theme path'] = drupal_get_path('module', 'tims') . '/theme';
    $info['process functions'][] = 'tims_set_template';
    
    
    // Use the drupal theme() logic for determining the closest match
    // If there's no implementation, check for more generic fallbacks.
    $match = $hook;
    if (!isset($theme_registry_array[$match])) {
      // Iteratively strip everything after the last '__' delimiter, until an
      // implementation is found.
      while ($pos = strrpos($match, '__')) {
        $match = substr($match, 0, $pos);
        if (isset($theme_registry_array[$match])) {
          if (isset($theme_registry_array[$match]['function']) 
            && $theme_registry_array[$match]['function'] == 'tims_render') {
            //Don't merge our own TIMS hooks
            continue;
          }
          
          //We found a match!
          break;
        }
      }
      if (isset($theme_registry_array[$match])) {
        //Only merge the hook if it exists

        //We should merge all of the regsitry items into our new one so that all
        //normal preprocess functions are called.
        $info = array_merge_recursive($theme_registry_array[$match], $info);
      }
    }

    $theme_registry_object[$theme_hook_original] = $hooks[$hook] = $info;
  }
}

/**
 * @param $variables
 * @param $hook
 *
 * Implementation of template_process.
 * Used to determine which TWIG template to use when rendering the element.
 */
function tims_set_template(&$variables, $hook) {
  $variables['#tims_template'] = $hook;
}

/**
 * Renders a template using Twig.
 */
function tims_render($variables) {
  require_once DRUPAL_ROOT . '/sites/all/libraries/Twig/lib/Twig/Autoloader.php';
  Twig_Autoloader::register();
  require_once drupal_get_path('module', 'tims') . '/tims_extension.php';

  $templates = variable_get('tims_templates', array());

  $template = NULL;
  if (isset($variables['#tims_template'])) {
    $hook = $variables['#tims_template'];
    if (isset($templates[$hook])) {
      $template = $templates[$hook];
    }
  }

  foreach (array_reverse($variables['theme_hook_suggestions']) as $hook) {
    if (array_key_exists($hook, $templates)) {
      $template = $templates[$hook];
      break;
    }
  }

  if (!$template) {
    watchdog('tims', 'Unable to find the correct TWIG Template for a hooked element.', array(), WATCHDOG_ERROR);
    return;
  }

  $loader = new Twig_Loader_String();
  $twig = new Twig_Environment($loader, array(
    'debug'      => TRUE,
    'autoescape' => FALSE,
  ));
  $twig->addExtension(new Twig_Extension_Debug());
  $twig->addExtension(new Tims_Extension());
  $output = $twig->render($template, $variables);

  return $output;
}

/**
 * Implements hook_menu().
 */
function tims_menu() {
  $items = array();

  $items['admin/structure/tims'] = array(
    'title' => 'Twig templates',
    'description' => 'Manage content templates using the Twig templating engine.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tims_list'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'tims.admin.php',
  );
  $items['admin/structure/tims/create'] = array(
    'title' => 'Create template',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tims_edit', '_new_'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'tims.admin.php',
  );
  $items['admin/structure/tims/%/edit'] = array(
    'title' => 'Edit template',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tims_edit', 3),
    'access arguments' => array('administer site configuration'),
    'file' => 'tims.admin.php',
  );
  $items['admin/structure/tims/%/delete'] = array(
    'title' => 'Delete template',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tims_delete', 3),
    'access arguments' => array('administer site configuration'),
    'file' => 'tims.admin.php',
  );

  return $items;
}
